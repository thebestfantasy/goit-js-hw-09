{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SACpCF,EAAKG,iBAAiB,UAItB,SAAiBC,GAGf,GAFAA,EAAIC,iBAEAC,EACF,OAGFA,GAAW,EACX,MAAMC,EAAW,IAAIC,SAASR,GACxBS,EAAQC,OAAOH,EAASI,IAAI,UAC5BC,EAAOL,EAASI,IAAI,QACpBE,EAASN,EAASI,IAAI,UAC5B,IAAIG,EAAW,GAEf,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAAG,CACnC,MAAMC,EAAUC,EAAcF,EAAGN,GAASM,EAAI,GAAKH,GAChDM,MAAK,EAACC,SAAEA,EAAQC,MAAEA,MACjBC,EAAAvB,GAASwB,OAAOC,QAAQ,uBAAqBJ,QAAiBC,OAC5DI,QAAMC,IAAI,uBAAqBN,QAAiBC,MAAU,IAE7DM,OAAM,EAACP,SAAEA,EAAQC,MAAEA,MAClBC,EAAAvB,GAASwB,OAAOK,QAAQ,sBAAoBR,QAAiBC,OAC3DI,QAAMC,IAAI,sBAAoBN,QAAeC,MAAU,IAE7DN,EAASc,KAAKZ,E,CAEhBa,QAAQC,IAAIhB,GAAUiB,SAAQ,KAC9BzB,GAAW,CAAK,G,IA9BlB,IAAIA,GAAW,EAkCf,SAASW,EAAcE,EAAUC,GAC/B,OAAO,IAAIS,SAAQ,CAACG,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEb,E,MAAUC,IAEpBa,EAAO,C,SAAEd,E,MAAUC,GAAQ,GAE5BA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onClick);\nlet isActive = false;\n\n\nfunction onClick(evt) {\n  evt.preventDefault();\n  \n  if (isActive) {\n    return\n  };\n\n  isActive = true;\n  const formData = new FormData(form);\n  const delay = Number(formData.get('delay'));\n  const step = formData.get('step');\n  const amount = formData.get('amount');\n  let promises = [];\n \n  for (let i = 1; i <= amount; i += 1) {\n    const promise = createPromise(i, delay + (i - 1) * step)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    promises.push(promise);\n  }\n  Promise.all(promises).finally(() => { \n  isActive = false;\n});\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }   \n    }, delay)\n  });\n}\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","addEventListener","evt","preventDefault","$47d4ff9957288465$var$isActive","formData","FormData","delay1","Number","get","step","amount","promises","i","promise","$47d4ff9957288465$var$createPromise","then","position","delay","$parcel$interopDefault","Notify","success","console","log","catch","failure","push","Promise","all","finally","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.034c56e7.js.map"}