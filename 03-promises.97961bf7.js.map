{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SACpCF,EAAKG,iBAAiB,UAItB,SAAiBC,GAGf,GAFAA,EAAIC,iBAEAC,EACF,OAGFA,GAAW,EAEX,MAAMC,EAAQC,OAAOR,EAAKS,SAASC,MAAMC,OACnCC,EAAOZ,EAAKS,SAASG,KAAKD,MAC1BE,EAASb,EAAKS,SAASI,OAAOF,MACpC,IAAIG,EAAW,GAEf,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAAG,CACnC,MAAMC,EAAUC,EAAcF,EAAGR,GAASQ,EAAI,GAAKH,GAChDM,MAAK,EAACC,SAAEA,EAAQT,MAAEA,MACjBU,EAAAtB,GAASuB,OAAOC,QAAQ,uBAAqBH,QAAiBT,OAC5Da,QAAMC,IAAI,uBAAqBL,QAAiBT,MAAU,IAE7De,OAAM,EAACN,SAAEA,EAAQT,MAAEA,MAClBU,EAAAtB,GAASuB,OAAOK,QAAQ,sBAAoBP,QAAiBT,OAC3Da,QAAMC,IAAI,sBAAoBL,QAAeT,MAAU,IAE7DI,EAASa,KAAKX,E,CAEhBY,QAAQC,IAAIf,GAAUgB,SAAQ,KAC9BxB,GAAW,CAAK,G,IA9BlB,IAAIA,GAAW,EAkCf,SAASW,EAAcE,EAAUT,GAC/B,OAAO,IAAIkB,SAAQ,CAACG,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEZ,E,MAAUT,IAEpBsB,EAAO,C,SAAEb,E,MAAUT,GAAQ,GAE5BA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onClick);\nlet isActive = false;\n\n\nfunction onClick(evt) {\n  evt.preventDefault();\n  \n  if (isActive) {\n    return\n  };\n\n  isActive = true;\n\n  const delay = Number(form.elements.delay.value);\n  const step = form.elements.step.value;\n  const amount = form.elements.amount.value;\n  let promises = [];\n \n  for (let i = 1; i <= amount; i += 1) {\n    const promise = createPromise(i, delay + (i - 1) * step)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    promises.push(promise);\n  }\n  Promise.all(promises).finally(() => { \n  isActive = false;\n});\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }   \n    }, delay)\n  });\n}\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","addEventListener","evt","preventDefault","$47d4ff9957288465$var$isActive","delay1","Number","elements","delay","value","step","amount","promises","i","promise","$47d4ff9957288465$var$createPromise","then","position","$parcel$interopDefault","Notify","success","console","log","catch","failure","push","Promise","all","finally","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.97961bf7.js.map"}